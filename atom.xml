<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wdbbsq.github.io</id>
    <title>ionia</title>
    <updated>2020-07-24T02:35:45.034Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wdbbsq.github.io"/>
    <link rel="self" href="https://wdbbsq.github.io/atom.xml"/>
    <subtitle>&lt;i&gt;What you are you do not see, what you see is your shadow.&lt;/i&gt;</subtitle>
    <logo>https://wdbbsq.github.io/images/avatar.png</logo>
    <icon>https://wdbbsq.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ionia</rights>
    <entry>
        <title type="html"><![CDATA[MapReduce: Simplified Data Processing on Large Cluster（译）🚧UnderConstruction🚧]]></title>
        <id>https://wdbbsq.github.io/post/mapreduce-simplified-data-processing-on-large-clusteryi/</id>
        <link href="https://wdbbsq.github.io/post/mapreduce-simplified-data-processing-on-large-clusteryi/">
        </link>
        <updated>2020-03-10T01:57:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是Google2004年发布的一篇OSDI论文，详细介绍了MapReduce的实现细节，青涩不当之处还望各位指出，<a href="https://research.google/pubs/pub62/">原文链接</a>。</p>
</blockquote>
<p><em>Written by Jeffery Dean &amp; Sanjay Ghemawat</em></p>
<p><em>Translated by ionia</em></p>
<h2 id="摘要">摘要</h2>
<p>映射归约（MapReduce）是一种编程模型，一种用于处理和生成大规模数据集的相关工具。用户定义一个处理键值对的<code>map</code>函数来生成一组中间键值对（intermediate key/value pairs），以及一个合并所有具有相同<code>key</code>的中间<code>value</code>的<code>reduce</code>函数。正如本文中的例子一样，很多真实世界的任务都可以被该模型所表述。</p>
<p>使用这种函数样式编写的程序会自动并行化，并在大型商用机器集群上运行。<code>run-time</code>系统将会负责划分输入数据、调度一组机器完成程序的执行、处理机器故障以及管理集群内部的信息传递。这就使得没有任何并行和分布式系统经验的程序员也可以轻松利用大型分布式系统资源。</p>
<p>我们在大型商用机器集群上运行的MapReduce模型是可扩展的：一个典型的MapReduce计算过程会在数千台机器上处理很多万亿字节（TB）的数据。Google的程序员认为这个系统用起来很简单：在Google的集群服务器上每天都运行着数百个、乃至一千个MapReduce程序。</p>
<h2 id="1-简介">1 简介</h2>
<p>在过去的五年里（2000~2004），笔者与Google的同事进行了上百次需要处理大量原始数据（诸如抓取的文档，Web请求日志等）的专业计算任务，以得到各种衍生数据，比如<a href="%5Bhttps://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%5D(https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95)">倒排索引</a>、Web文档图形结构的各种表示形式、每个主机爬取的页面数摘要、给定日期中最频繁的查询集等等。大多数此类计算任务从概念上说都是简单明了的。然而因为输入的数据通常很庞大，为了在一个较合理的时间内完成，这些计算任务只能被分配给数百或数千台机器。为了解决并行计算，分配数据和处理错误的问题，大量复杂代码将原本简单的计算复杂化。</p>
<p>为了应对这种复杂情况，我们设计了一种新的抽象概念，使其能够描述我们想要实现简单计算，同时隐藏繁琐复杂的并行化、容错性（fault-tolerance）、数据分配和载入平衡的细节。这个抽象概念是受<code>Lisp</code>和其他函数式编程语言中的<code>map</code>和<code>reduce</code>函数所启发。_我们意识到，大多数计算过程中都包括在输入数据中计算一组中间键值对时利用<code>map</code>操作得到每个逻辑记录，然后通过<code>reduce</code>操作得到所有键相同的值，以相应地组合派生数据。_对用户指定的<code>map</code>和<code>reduce</code>函数模型的应用，让我们可以轻松进行大型并行计算任务，并将二次执行作为初级容错机制。</p>
<p>这些工作的主要贡献是创造了一个简单强大的接口，实现了自动并行化、大型计算任务的分配以及在大型商用机型上的高性能。</p>
<p>第二章描述了基础的编程模型并介绍了几个例子。第三章介绍了一种面向集群的计算环境的MapReduce接口的实现。第四章介绍了几处我们认为有用的编程模型的细化。第五章是针对大量任务的实现的性能测试方法。第六章在Google内部探索了MapReduce的应用，包括我们将其作为产品索引系统的一种改写的实验。第七章讨论了与其相关的及未来的工作。</p>
<h2 id="2-编程模型">2 编程模型</h2>
<h3 id="21-示例">2.1 示例</h3>
<h3 id="22-类型">2.2 类型</h3>
<h3 id="23-更多例子">2.3 更多例子</h3>
<h2 id="3-执行">3 执行</h2>
<h3 id="31-执行概述">3.1 执行概述</h3>
<h3 id="32-主数据结构">3.2 主数据结构</h3>
<h3 id="33-容错性">3.3 容错性</h3>
<h3 id="34-局部性">3.4 局部性</h3>
<h3 id="35-任务粒度">3.5 任务粒度</h3>
<h3 id="36-备份任务">3.6 备份任务</h3>
<h2 id="4-固件">4 固件</h2>
<h3 id="41-分割函数">4.1 分割函数</h3>
<h3 id="42">4.2</h3>
<h3 id="43-组合函数">4.3 组合函数</h3>
<h3 id="44-输入输出类型">4.4 输入输出类型</h3>
<h3 id="45-副作用">4.5 副作用</h3>
<h3 id="46-忽略坏数据">4.6 忽略坏数据</h3>
<h3 id="47-本地执行">4.7 本地执行</h3>
<h3 id="48-状态信息">4.8 状态信息</h3>
]]></content>
    </entry>
</feed>